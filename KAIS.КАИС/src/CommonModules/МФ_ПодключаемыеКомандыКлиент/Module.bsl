//
//	Филимонов И.В.
//		+7 913 240 81 77
//		+7 905 084 20 06 (Telegram)
//		https://github.com/Shu-ler
//		
#Область ПрограммныйИнтерфейс

// Обработчик команды 'Настройки поверки и ТО' для формы элемента справочника Номенклатура
// 
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка.ЗаказКлиента - Массив объектов
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ОбновитьЗаказыКлиентов(МассивОбъектов, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Форма = ДополнительныеПараметры.Форма;

	// 1. Запуск фонового задания на сервере.
	ДлительнаяОперация = МФ_ПодключаемыеКомандыВызовСервера.НачатьОбновлениеЗаказовКлиентов(Форма.УникальныйИдентификатор);
		
	// 2. Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);

	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;

	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru='Обновление заказов клиентов завершено'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
											   Новый ОписаниеОповещения("ПриЗавершенииОбновленияЗаказовКлиентов",
																		ЭтотОбъект),
											   ПараметрыОжидания);

КонецПроцедуры

// Обработчик команды 'Настройки поверки и ТО' для формы элемента справочника Номенклатура
// 
// Параметры:
//  МассивОбъектов - Массив из СправочникСсылка.ФО_НастройкиОтправкиОтчетности - Массив объектов
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура СоздатьЗаказыПоставщикам(МассивОбъектов, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Форма = ДополнительныеПараметры.Форма;

	// 1. Запуск фонового задания на сервере.
	ДлительнаяОперация = МФ_ПодключаемыеКомандыВызовСервера.НачатьОбновлениеЗаказовПоставщикам(Форма.УникальныйИдентификатор);
		
	// 2. Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);

	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;

	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru='Обновление заказов поставщикам завершено'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
											   Новый ОписаниеОповещения("ПриЗавершенииОбновленияЗаказовПоставщикам",
																		ЭтотОбъект),
											   ПараметрыОжидания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриЗавершенииОбновленияЗаказовКлиентов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат.Статус = "Выполнено" Тогда

		ИзВременногоХранилища = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

		НеизвестныеКонтрагенты = ИзВременногоХранилища.НеизвестныеКонтрагенты;

		Если НеизвестныеКонтрагенты.Количество() > 0 Тогда

			ТекстСообщения = "Есть заказы от неизвестных клиентов:";

			Для Каждого Элемент Из НеизвестныеКонтрагенты Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Элемент;
			КонецЦикла;

			НавигационнаяСсылка = "";
			Если ИзВременногоХранилища.Свойство("Заметка") Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ИзВременногоХранилища["Заметка"]);
			КонецЕсли;

			ПоказатьОповещениеПользователя(ТекстСообщения, НавигационнаяСсылка,,, СтатусОповещенияПользователя.Важное);

		КонецЕсли;

	КонецЕсли;

	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказКлиента"));

КонецПроцедуры

Процедура ПриЗавершенииОбновленияЗаказовПоставщикам(Результат, ДополнительныеПараметры) Экспорт

//	Если Результат.Статус = "Выполнено" Тогда
//
//		ИзВременногоХранилища = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
//
//		НеизвестныеКонтрагенты = ИзВременногоХранилища.НеизвестныеКонтрагенты;
//
//		Если НеизвестныеКонтрагенты.Количество() > 0 Тогда
//
//			ТекстСообщения = "Есть заказы от неизвестных клиентов:";
//
//			Для Каждого Элемент Из НеизвестныеКонтрагенты Цикл
//				ТекстСообщения = ТекстСообщения + Символы.ПС + Элемент;
//			КонецЦикла;
//
//			НавигационнаяСсылка = "";
//			Если ИзВременногоХранилища.Свойство("Заметка") Тогда
//				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ИзВременногоХранилища["Заметка"]);
//			КонецЕсли;
//
//			ПоказатьОповещениеПользователя(ТекстСообщения, НавигационнаяСсылка,,, СтатусОповещенияПользователя.Важное);
//
//		КонецЕсли;
//
//	КонецЕсли;

	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));

КонецПроцедуры

#КонецОбласти