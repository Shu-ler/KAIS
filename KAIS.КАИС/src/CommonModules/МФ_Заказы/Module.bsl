//
//	Филимонов И.В.
//		+7 913 240 81 77
//		+7 905 084 20 06 (Telegram)
//		https://github.com/Shu-ler
//		
#Область ПрограммныйИнтерфейс

// Создает заказы клиентов для зарегистрированных клиентов, возвращает список неизвестных клиентов
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS, Неопределено - Профиль
// 
// Возвращаемое значение:
//  Структура - Обновить заказы:
// * НеизвестныеКонтрагенты - Массив Из Произвольный - 
Функция ЗаказыКлиентов(Профиль = Неопределено) Экспорт

	РезультатОбновления = Новый Структура;

	НеизвестныеКонтрагенты = Новый Массив;
	
	// Получение набора профилей
	НаборПрофилей = НаборПрофилей(Профиль);

	Для Каждого ТекущийПрофиль Из НаборПрофилей Цикл

		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru='Чтение заказов на сайте'"),);
		ДанныеПрофиля = ДанныеПрофиля(ТекущийПрофиль);
		ЗаказыНаСайте = МФ_ИнтерфейсССайтом.СписокЗаказов(ДанныеПрофиля);

		Для Каждого ЗаказНаСайте Из ЗаказыНаСайте Цикл

			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("МФ_КодКАИС", ЗаказНаСайте.КлиентКод);

			Если Контрагент.Пустая() Тогда

				ОписаниеКонтрагента = СтрШаблон("%1 -- %2", ЗаказНаСайте.КлиентКод, ЗаказНаСайте.КлиентСайта);

				ИндексВСписке = НеизвестныеКонтрагенты.Найти(ОписаниеКонтрагента);

				Если ИндексВСписке = Неопределено Тогда
					НеизвестныеКонтрагенты.Добавить(ОписаниеКонтрагента);
				КонецЕсли;

			Иначе

				ТаблицаТовары = МФ_ИнтерфейсССайтом.СодержимоеЗаказа(ЗаказНаСайте.Идентификатор, ДанныеПрофиля);

				Если ТаблицаТовары.Количество() > 0 Тогда

					НайденЗаказ = Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента", ЗаказНаСайте.Номер);

					Если НайденЗаказ.Пустая() Тогда
						
						//@skip-check query-in-loop
						ДанныеСоглашения = ДанныеСоглашенияКонтрагента(Контрагент);

						ТекстСообщения = СтрШаблон("Создание заказа %1", ЗаказНаСайте.Номер);
						ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);

						ПартнерСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");

						ДанныеЗаказа = ДанныеНовогоЗаказа(ДанныеПрофиля);

						ДанныеЗаказа.Вставить("МФ_Идентификатор", ЗаказНаСайте.Идентификатор);
						ДанныеЗаказа.Вставить("МФ_Номер", ЗаказНаСайте.Номер);
						ДанныеЗаказа.Вставить("Дата", ЗаказНаСайте.Дата);
						ДанныеЗаказа.Вставить("НомерПоДаннымКлиента", ЗаказНаСайте.Номер);
						ДанныеЗаказа.Вставить("ДатаПоДаннымКлиента", ЗаказНаСайте.Дата);
						ДанныеЗаказа.Вставить("Контрагент", Контрагент);
						ДанныеЗаказа.Вставить("Партнер", ПартнерСсылка);
						ДанныеЗаказа.Вставить("Комментарий", СтрШаблон("Клиент: код - %1, наименование - %2",
																	   ЗаказНаСайте.КлиентКод,
																	   ЗаказНаСайте.КлиентСайта));

						ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
						ЗаказКлиента.Заполнить(ДанныеЗаказа);

						ЗаполнитьЗначенияСвойств(ЗаказКлиента, ДанныеЗаказа,, "Организация");

						Если ДанныеСоглашения <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ЗаказКлиента, ДанныеСоглашения);
						КонецЕсли;

						ЗаказКлиента.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПрофиля.Организация);

						ЗаполнитьТабличнуюЧастьТовары(ЗаказКлиента, ДанныеПрофиля, ТаблицаТовары);

						Попытка
							ЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						КонецПопытки;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	РезультатОбновления.Вставить("НеизвестныеКонтрагенты", НеизвестныеКонтрагенты);

	Если НеизвестныеКонтрагенты.Количество() > 0 Тогда

		СоздатьЗаметкуОНеизвестныхПокупателях(РезультатОбновления, НеизвестныеКонтрагенты);

	КонецЕсли;

	Возврат РезультатОбновления;

КонецФункции

// Создает заказы клиентов для зарегистрированных клиентов, возвращает список неизвестных клиентов
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS, Неопределено - Профиль
// 
// Возвращаемое значение:
//  Структура - Обновить заказы:
// * НеизвестныеКонтрагенты - Массив Из Произвольный - 
Функция ЗаказыПоставщикам(Профиль = Неопределено) Экспорт

	РезультатОбновления = Новый Структура;

	НеизвестныеКонтрагенты = Новый Массив;
	
	// Получение набора профилей
	НаборПрофилей = НаборПрофилей(Профиль);
	ДанныеПрофиля = ДанныеПрофиля(НаборПрофилей[0]);

	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru='Расчет потребностей заказа товаров'"),);
	ПотребностьВЗаказеТовара = ПотребностьВЗаказеТовара();
	ЗаказыНаСайте = ЗаказыНаСайте(ПотребностьВЗаказеТовара);

	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru='Чтание поставщиков и цен поставщиков с сайта'"),);
	Для Каждого ЗаказНаСайте Из ЗаказыНаСайте Цикл

		ТаблицаТовары = МФ_ИнтерфейсССайтом.СодержимоеЗаказа(ЗаказНаСайте.МФ_Идентификатор, ДанныеПрофиля);

		НаЗаполнение = ПотребностьВЗаказеТовара.НайтиСтроки(Новый Структура("МФ_Идентификатор",
																			ЗаказНаСайте.МФ_Идентификатор));

		Для Каждого Элемент Из НаЗаполнение Цикл

			ДанныеСайта = ТаблицаТовары.НайтиСтроки(Новый Структура("Артикул, НаименованиеПроизводителя",
																	Элемент.Артикул,
																	Элемент.НаименованиеПроизводитель));
			Если ДанныеСайта.Количество() > 0 Тогда

				Элемент.Цена = ДанныеСайта[0].ЦенаВходящая;
				Элемент.ПоставщикКод = ДанныеСайта[0].ПоставщикКод;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ТаблицаПоставщиков = ТаблицаПоставщиков(ПотребностьВЗаказеТовара);

	Для Каждого Поставщик Из ТаблицаПоставщиков Цикл

		ТекстСообщения = СтрШаблон("Создание заказа для поставщика с кодом %1 [%2]",
								   Поставщик.ПоставщикКод,
								   Поставщик.КонтрагентНаименование);
		ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
		
		// Подготовка ТЧ Товары
		СтрокиТЧТовары = ПотребностьВЗаказеТовара.НайтиСтроки(Новый Структура("ПоставщикКод", Поставщик.ПоставщикКод));

		// Создание заказа
		СоздатьЗаказПоставщику(Поставщик, СтрокиТЧТовары);

	КонецЦикла;

	Если НеизвестныеКонтрагенты.Количество() > 0 Тогда

		СоздатьЗаметкуОНеизвестныхПокупателях(РезультатОбновления, НеизвестныеКонтрагенты);

	КонецЕсли;

	Возврат РезультатОбновления;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает набор профилей для обновления заказов
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS, Неопределено - Профиль
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МФ_ПрофилиKAIS - Набор профилей
Функция НаборПрофилей(Профиль)

	Если Профиль = Неопределено Тогда

		ТекстЗапроса = "ВЫБРАТЬ
					   |	МФ_ПрофилиKAIS.Ссылка КАК Ссылка
					   |ИЗ
					   |	Справочник.МФ_ПрофилиKAIS КАК МФ_ПрофилиKAIS
					   |ГДЕ
					   |	МФ_ПрофилиKAIS.ПометкаУдаления = ЛОЖЬ";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Профиль);

		Результат = Запрос.Выполнить().Выгрузить();

		Набор = Результат.ВыгрузитьКолонку("Ссылка");

	Иначе

		Набор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Профиль);

	КонецЕсли;

	Возврат Набор;

КонецФункции

// Формирует таблицу значений с потребностью в заказе товара.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Потребность - Число
//  * Номенклатура - СправочникСсылка.Номенклатура - 
//  * Склад - СправочникСсылка.Склады - 
//  * Назначение - СправочникСсылка.Назначения - 
//  * Заказ - ДокументСсылка.ЗаказКлиента - 
//  * МФ_Идентификатор - Строка - 
//  * Артикул - Строка - 
//  * Производитель - СправочникСсылка.Производители - 
//  * Наименование - Строка - 
//  * НаименованиеПроизводитель - Строка - 
//  * ПоставщикКод - Строка - 
//  * Цена - Число
Функция ПотребностьВЗаказеТовара()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ЗаказКлиента.Назначение КАК Назначение
				   |ПОМЕСТИТЬ ВТНазначения
				   |ИЗ
				   |	Документ.ЗаказКлиента КАК ЗаказКлиента
				   |ГДЕ
				   |	(ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
				   |	ИЛИ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
				   |	И ЗаказКлиента.Проведен = ИСТИНА
				   |	И ЗаказКлиента.МФ_Номер <> """"
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЗапасыИПотребностиОстатки.КОбеспечениюОстаток - ЗапасыИПотребностиОстатки.ЗаказаноОстаток КАК Потребность,
				   //				   |	ЗапасыИПотребностиОстатки.КОбеспечениюОстаток КАК КОбеспечениюОстаток,

				   //				   |	ЗапасыИПотребностиОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
				   |	ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
				   |	ЗапасыИПотребностиОстатки.Склад КАК Склад,
				   |	ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
				   |	ЗапасыИПотребностиОстатки.Назначение.Заказ.МФ_Идентификатор КАК МФ_Идентификатор,
				   |	ЗапасыИПотребностиОстатки.Номенклатура.Артикул КАК Артикул,
				   |	ЗапасыИПотребностиОстатки.Номенклатура.Производитель КАК Производитель,
				   |	ЗапасыИПотребностиОстатки.Номенклатура.Наименование КАК Наименование,
				   |	ЗапасыИПотребностиОстатки.Номенклатура.Производитель.Наименование КАК НаименованиеПроизводитель,
				   |	""      "" КАК ПоставщикКод,
				   |	0 КАК Цена
				   |ИЗ
				   |	ВТНазначения КАК ВТНазначения
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИПотребности.Остатки КАК ЗапасыИПотребностиОстатки
				   |		ПО ЗапасыИПотребностиОстатки.Назначение = ВТНазначения.Назначение
				   |ГДЕ
				   |	(ЗапасыИПотребностиОстатки.КОбеспечениюОстаток - ЗапасыИПотребностиОстатки.ЗаказаноОстаток > 0) И (ЗапасыИПотребностиОстатки.КОбеспечениюОстаток - ЗапасыИПотребностиОстатки.ВНаличииОстаток > 0)";
	Запрос = Новый Запрос(ТекстЗапроса);

	ПотребностьВЗаказеТовара = Запрос.Выполнить().Выгрузить();

	Возврат ПотребностьВЗаказеТовара

КонецФункции

// Формирует тоаблицу значений с заказами на сайте, подлежащими комплектации.
// 
// Параметры:
//  ПотребностьВЗаказеТовара - см. ПотребностьВЗаказеТовара 
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Назначение - СправочникСсылка.Назначения - 
// * МФ_Идентификатор - Строка - 
Функция ЗаказыНаСайте(ПотребностьВЗаказеТовара)

	ЗаказыНаСайте = ПотребностьВЗаказеТовара.Скопировать();
	ЗаказыНаСайте.Свернуть("Назначение, МФ_Идентификатор");

	Возврат ЗаказыНаСайте;

КонецФункции

// Формирует таблицу поставщиков.
// 
// Параметры:
//  ПотребностьВЗаказеТовара - см. ПотребностьВЗаказеТовара 
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ПоставщикКод - Строка - 
// * Контрагент - СправочникСсылка.Контрагенты - 
// * КонтрагентНаименование - Строка - 
// * Партнер - СправочникСсылка.Партнеры - 
Функция ТаблицаПоставщиков(ПотребностьВЗаказеТовара)

	ТаблицаПоставщиков = ПотребностьВЗаказеТовара.Скопировать();
	ТаблицаПоставщиков.Свернуть("ПоставщикКод");

	ТаблицаПоставщиков.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПоставщиков.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаПоставщиков.Колонки.Добавить("КонтрагентНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(60));

	Для Каждого Поставщик Из ТаблицаПоставщиков Цикл

		Поставщик.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("МФ_КодКАИС", Поставщик.ПоставщикКод);

		Если Поставщик.Контрагент.Пустая() Тогда

			Поставщик.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			Поставщик.КонтрагентНаименование = "неизвестный поставщик";

		Иначе

			Поставщик.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Поставщик.Контрагент, "Партнер");
			Поставщик.КонтрагентНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Поставщик.Контрагент,
																						 "Наименование");

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПоставщиков;

КонецФункции

// Создает новый заказ поставщику.
// 
// Параметры:
//  Поставщик - СтрокаТаблицыЗначений - Поставщик:
// * Потребность - Число - 
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * Склад - СправочникСсылка.Склады - 
// * Назначение - СправочникСсылка.Назначения - 
// * Заказ - ДокументСсылка.ЗаказКлиента - 
// * МФ_Идентификатор - Строка - 
// * Артикул - Строка - 
// * Производитель - СправочникСсылка.Производители - 
// * Наименование - Строка - 
// * НаименованиеПроизводитель - Строка - 
// * ПоставщикКод - Строка - 
// * Цена - Число - 
// * Контрагент - СправочникСсылка.Контрагенты - 
// * Партнер - СправочникСсылка.Партнеры - 
//  СтрокиТЧТовары - Массив из СтрокаТаблицыЗначений - Строки ТЧТовары
// 
Процедура СоздатьЗаказПоставщику(Поставщик, СтрокиТЧТовары)

	СуммаДокумента = 0;

	// Создание и инициализация объекта
	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
	ЗаказПоставщику.Заполнить(Неопределено);
	ЗаказПоставщику.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ЗаказПоставщику.Дата = ТекущаяДатаСеанса();
	
	// Заполнение налогообложения - поле 'Организация' должно быть заполнено
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ЗаказПоставщику);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗаказПоставщику.ЗакупкаПодДеятельность, ПараметрыЗаполнения);

	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЗаказПоставщику);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(ЗаказПоставщику.НалогообложениеНДС, ПараметрыЗаполнения);

	ЗаказПоставщику.ЦенаВключаетНДС = Истина;

	// Заполнение контрагента, партнера и комментария
	ЗаказПоставщику.Комментарий = "Поставщик " + Поставщик.ПоставщикКод;
	ЗаказПоставщику.Контрагент = Поставщик.Контрагент;
	ЗаказПоставщику.Партнер = Поставщик.Партнер;

	// Заполнение ТЧ Товары
	Для Каждого СтрокаТЧ Из СтрокиТЧТовары Цикл

		СтрокаТЧТовары = ЗаказПоставщику.Товары.Добавить();

		СтрокаТЧТовары.Номенклатура = СтрокаТЧ.Номенклатура;
		СтрокаТЧТовары.КоличествоУпаковок = СтрокаТЧ.Потребность;
		СтрокаТЧТовары.Количество = СтрокаТЧ.Потребность;
		СтрокаТЧТовары.Цена = СтрокаТЧ.Цена;
		СтрокаТЧТовары.Назначение = СтрокаТЧ.Назначение;
		СтрокаТЧТовары.Склад = ЗаказПоставщику.Склад;

		ЗаполнитьРасчетныеКолонки(СтрокаТЧТовары);

		СуммаДокумента = СуммаДокумента + СтрокаТЧТовары.Сумма;

	КонецЦикла;

	// Фиксация суммы документа
	ЗаказПоставщику.СуммаДокумента = СуммаДокумента;
	
	// Сохранение заказа
	Попытка
		ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Нечто = ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТовары(ЗаказКлиента, ДанныеПрофиля, СодержимоеЗаказа)

	СуммаДокумента = 0;

	Для Каждого СтрокаЗаказаНаСайте Из СодержимоеЗаказа Цикл	// 		Для Каждого Эл Из СтрокиТаблицы Цикл

		ТоварСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СтрокаЗаказаНаСайте.Артикул);

		Если ТоварСсылка.Пустая() И Не ПустаяСтрока(СтрокаЗаказаНаСайте.НоменклатураСайта) Тогда

			ТоварОбъект = НоваяНоменклатура(ДанныеПрофиля);

			ТоварОбъект.Наименование = СтрокаЗаказаНаСайте.НаименованиеНоменклатуры;
			ТоварОбъект.Артикул = СтрокаЗаказаНаСайте.Артикул;

			Производитель = НайтиСоздатьПроизводителя(СтрокаЗаказаНаСайте.НаименованиеПроизводителя);

			ТоварОбъект.Производитель = Производитель;

			Попытка

				ТоварОбъект.Записать();
				ТоварСсылка = ТоварОбъект.Ссылка;

			Исключение

				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				ТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();

			КонецПопытки;

		КонецЕсли;

		СтрокаТЧТовары = ЗаказКлиента.Товары.Добавить();

		СтрокаТЧТовары.Номенклатура = ТоварСсылка;
		СтрокаТЧТовары.Количество = СтрокаЗаказаНаСайте.Количество;
		СтрокаТЧТовары.КоличествоУпаковок = СтрокаЗаказаНаСайте.Количество;
		СтрокаТЧТовары.Цена = СтрокаЗаказаНаСайте.Цена;
		СтрокаТЧТовары.Обособленно = Истина;
		СтрокаТЧТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		СтрокаТЧТовары.Отменено = СтрокаЗаказаНаСайте.Отказ;
		СтрокаТЧТовары.Склад = ЗаказКлиента.Склад;

		ЗаполнитьРасчетныеКолонки(СтрокаТЧТовары);

		Если Не СтрокаТЧТовары.Отменено Тогда
			СуммаДокумента = СуммаДокумента + СтрокаТЧТовары.Сумма;
		КонецЕсли;

	КонецЦикла;

	ЗаказКлиента.СуммаДокумента = СуммаДокумента;

КонецПроцедуры

// Заполнение расчетных колонок строки ТЧ Товары
// 
// Параметры:
//  СтрокаТЧТовары - ДокументТабличнаяЧастьСтрока.ЗаказКлиента.Товары, ДокументТабличнаяЧастьСтрока.ЗаказПоставщику.Товары - Строка ТЧТовары
Процедура ЗаполнитьРасчетныеКолонки(СтрокаТЧТовары)

	СтрокаТЧТовары.Сумма = СтрокаТЧТовары.Цена * СтрокаТЧТовары.Количество;
	СтрокаТЧТовары.СуммаСНДС = СтрокаТЧТовары.Сумма;
	СтрокаТЧТовары.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧТовары.Номенклатура, "СтавкаНДС");
	СтрокаТЧТовары.СуммаНДС = СтрокаТЧТовары.Сумма / 120 * 20;

КонецПроцедуры

Процедура СоздатьЗаметкуОНеизвестныхПокупателях(РезультатОбновления, НеизвестныеПоставщики)

	НаФормированиеЗаметки = Новый Массив;

	НаФормированиеЗаметки.Добавить("На сайте КАИС есть заказы от неизвестных клиентов:");

	Для Каждого Элемент Из НеизвестныеПоставщики Цикл
		НаФормированиеЗаметки.Добавить(Элемент);
	КонецЦикла;

	ТекстЗаметки = Новый ФорматированнаяСтрока(СтрСоединить(НаФормированиеЗаметки, Символы.ПС));

	Нечто = Новый ФорматированныйДокумент;
//	Для Каждого Элемент Из НаФормированиеЗаметки Цикл
//	Нечто.Добавить(Элемент)		
//	КонецЦикла;
	Нечто.Добавить(ТекстЗаметки);

	Заметка = Справочники.Заметки.СоздатьЭлемент();
	Заметка.Заполнить(Неопределено);
	Заметка.Автор = Пользователи.АвторизованныйПользователь();
	Заметка.ДатаИзменения = ТекущаяДатаСеанса();
	Заметка.ДляРабочегоСтола = Истина;
	Заметка.Пометка = Перечисления.ЦветаЗаметок.Голубой;
	Заметка.Содержание = Новый ХранилищеЗначения(Нечто, Новый СжатиеДанных(9));

	ТекстHTML = "";
	Вложения = Новый Структура;
	Нечто.ПолучитьHTML(ТекстHTML, Вложения);

	Заметка.ТекстСодержания = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML);

	Попытка

		Заметка.Записать();
		ЗаметкаСсылка = Заметка.Ссылка;

	Исключение

		ЗаметкаСсылка = Неопределено;

	КонецПопытки;

	РезультатОбновления.Вставить("Заметка", ЗаметкаСсылка);

КонецПроцедуры

// Возвращает данные профиля.
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
// 
// Возвращаемое значение: см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
//  
Функция ДанныеПрофиля(Профиль)

	ДанныеПрофиля = Справочники.МФ_ПрофилиKAIS.ДанныеПрофиля(Профиль);

	Возврат ДанныеПрофиля;

КонецФункции

Функция ДанныеСоглашенияКонтрагента(Контрагент)

	Результат = Неопределено;

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	СоглашенияСКлиентами.Ссылка КАК Соглашение,
				   |	СоглашенияСКлиентами.Организация КАК Организация,
				   |	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов
				   |ИЗ
				   |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
				   |ГДЕ
				   |	СоглашенияСКлиентами.Контрагент = &Контрагент
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	СоглашенияСКлиентами.ДатаНачалаДействия УБЫВ";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат = Выборка;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Данные нового заказа.
// 
// Параметры:
//  ДанныеПрофиля - См. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля
// 
// Возвращаемое значение:
//  Структура - Данные нового заказа:
// * Статус - ПеречислениеСсылка.СтатусыЗаказовКлиентов - 
// * Автор - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - 
// * Приоритет - СправочникСсылка.Приоритеты, Неопределено - 
// * Склад - СправочникСсылка.Склады - 
Функция ДанныеНовогоЗаказа(ДанныеПрофиля)

	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Статус", Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ДанныеЗаказа.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ДанныеЗаказа.Вставить("Приоритет", ЗначениеНастроекПовтИсп.ПолучитьПриоритетПоУмолчанию());
	ДанныеЗаказа.Вставить("Склад", ДанныеПрофиля.Склад);
	ДанныеЗаказа.Вставить("ЦенаВключаетНДС", Истина);
	ДанныеЗаказа.Вставить("Организация", ДанныеПрофиля.Организация);

	Возврат ДанныеЗаказа

КонецФункции

// Возвращает ссылку найденного по наименованию либо созданного производителя
// 
// Параметры:
//  Наименование - Строка - Наименование
// 
// Возвращаемое значение:
//  СправочникСсылка.Производители - Производитель с наименованием Наименование
Функция НайтиСоздатьПроизводителя(Наименование)

	ПроизводительСсылка = Справочники.Производители.НайтиПоНаименованию(Наименование);

	Если ПроизводительСсылка.Пустая() Тогда

		ПроизводительОбъект = Справочники.Производители.СоздатьЭлемент();
		ПроизводительОбъект.Заполнить(Неопределено);

		ПроизводительОбъект.Наименование = Наименование;

		Попытка
			ПроизводительОбъект.Записать();
			ПроизводительСсылка = ПроизводительОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка создания производителя (каталога) с нименованием:'")
												  + Наименование);
		КонецПопытки;

	КонецЕсли;

	Возврат ПроизводительСсылка

КонецФункции

Функция НоваяНоменклатура(ДанныеПрофиля)

	ТоварОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	ТоварОбъект.Заполнить(Неопределено);

	ТоварОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ТоварОбъект.ВидНоменклатуры = ДанныеПрофиля.ВидНоменклатуры;

	Попытка
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ТоварОбъект);
	Исключение
// TODO:
	КонецПопытки;
	
//	ТоварОбъект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду();
	Возврат ТоварОбъект

КонецФункции

#КонецОбласти