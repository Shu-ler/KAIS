#Область ПрограммныйИнтерфейс

// Обновить список заказов.
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
//  НеизвестныеПоставщики - Неопределено, Массив из Строка - Неизвестные поставщики
// 
// Возвращаемое значение:
//  Структура - Обновить список заказов:
// * Ошибка - Строка - 
// * НеизвестныеПоставщики - Массив из Произвольный - Поставщики
Функция ОбновитьСписокЗаказов(Профиль = Неопределено, НеизвестныеПоставщики = Неопределено) Экспорт

	РезультатОбновления = Новый Структура;

	HTTPСоединение = Неопределено;
	ОбновленоЗаписей = 0;
	ИмяМетода = "GET";

	Если НеизвестныеПоставщики = Неопределено Тогда
		НеизвестныеПоставщики = Новый Массив;
	КонецЕсли;
	
	// Получение набора профилей
	НаборПрофилей = НаборПрофилей(Профиль);
	
	// Обработка профилей
	Для Каждого Профиль Из НаборПрофилей Цикл

		ДанныеПрофиля = ДанныеПрофиля(Профиль);
		Заголовки = Заголовки(Профиль);

		ПродолжатьЦикл = УстановитьСоединениеССайтом(HTTPСоединение, Заголовки, Профиль);

		Страница = 0;

		Пока ПродолжатьЦикл Цикл

			АдресРесурса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДанныеПрофиля.РесурсЗаказы,
																				   Формат(Страница, "ЧГ=0;"),
																				   ДанныеПрофиля.РежимЗаказовБезДетализации);
			АдресРесурса = АдресРесурса + "&filters=%7B%22date_period%22%3A%22INTERVAL+1+MONTH%22%7D";
			Страница = Страница + 1;
			
			// Создать HTTP-запроса.
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			
			// Получить ответ сервера в виде объекта HTTPОтвет.
			Результат = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);

			Если Результат.КодСостояния = 200 Тогда

				Ответ = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);

				//@skip-check query-in-loop
				ПродолжатьЦикл = ОбработатьСтраницуЗаказов(Профиль,
														   Ответ,
														   ОбновленоЗаписей,
														   НеизвестныеПоставщики,
														   ДанныеПрофиля);
			Иначе

				ТекстСообщения = СтрШаблон("HTTP запрос вернул код %1
										   |%2", Результат.КодСостояния, ОписаниеОшибки());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

				РезультатОбновления.Вставить("Ошибка", ТекстСообщения);

				Прервать;

			КонецЕсли;

		КонецЦикла;

		Константы.МФ_КАИСОбновлено.Установить(ТекущаяДатаСеанса());

	КонецЦикла;

	РезультатОбновления.Вставить("НеизвестныеПоставщики", НеизвестныеПоставщики);

	Если НеизвестныеПоставщики.Количество() > 0 Тогда

		СоздатьЗаметкуОНеизвестныхПокупателях(РезультатОбновления, НеизвестныеПоставщики);

	КонецЕсли;

	Возврат РезультатОбновления;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает набор профилей для обновления заказов
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS, Неопределено - Профиль
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МФ_ПрофилиKAIS - Набор профилей
Функция НаборПрофилей(Профиль)

	Если Профиль = Неопределено Тогда

		ТекстЗапроса = "ВЫБРАТЬ
					   |	МФ_ПрофилиKAIS.Ссылка КАК Ссылка
					   |ИЗ
					   |	Справочник.МФ_ПрофилиKAIS КАК МФ_ПрофилиKAIS
					   |ГДЕ
					   |	МФ_ПрофилиKAIS.ПометкаУдаления = ЛОЖЬ";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Профиль);

		Результат = Запрос.Выполнить().Выгрузить();

		Набор = Результат.ВыгрузитьКолонку("Ссылка");

	Иначе

		Набор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Профиль);

	КонецЕсли;

	Возврат Набор;

КонецФункции

Процедура СоздатьЗаметкуОНеизвестныхПокупателях(РезультатОбновления, НеизвестныеПоставщики)

	НаФормированиеЗаметки = Новый Массив;

	НаФормированиеЗаметки.Добавить("На сайте КАИС есть заказы от неизвестных поставщиков;");

	Для Каждого Элемент Из НеизвестныеПоставщики Цикл
		НаФормированиеЗаметки.Добавить(Элемент);
	КонецЦикла;

	ТекстЗаметки = Новый ФорматированнаяСтрока(СтрСоединить(НаФормированиеЗаметки, Символы.ПС));

	Заметка = Справочники.Заметки.СоздатьЭлемент();
	Заметка.Заполнить(Неопределено);
	Заметка.Автор = Пользователи.АвторизованныйПользователь();
	Заметка.ДатаИзменения = ТекущаяДатаСеанса();
	Заметка.ДляРабочегоСтола = Истина;
	Заметка.Пометка = Перечисления.ЦветаЗаметок.Голубой;
	Заметка.Содержание = Новый ХранилищеЗначения(ТекстЗаметки, Новый СжатиеДанных(9));
	Заметка.ТекстСодержания = ТекстЗаметки;

	Попытка

		Заметка.Записать();
		ЗаметкаСсылка = Заметка.Ссылка;

	Исключение

		ЗаметкаСсылка = Неопределено;

	КонецПопытки;

	РезультатОбновления.Вставить("Заметка", ЗаметкаСсылка);

КонецПроцедуры

// Возвращает данные профиля.
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
// 
// Возвращаемое значение: см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
//  
Функция ДанныеПрофиля(Профиль)

	ДанныеПрофиля = Справочники.МФ_ПрофилиKAIS.ДанныеПрофиля(Профиль);

	Возврат ДанныеПрофиля;

КонецФункции

// Формирует заголовки для HTTP - соединения
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
// 
// Возвращаемое значение:
//  Соответствие из Строка - Заголовки
Функция Заголовки(Профиль)

	Хост = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "Адрес");
	Реферер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("http://%1/", Хост);

	Заголовки = Новый Соответствие;

	Заголовки.Вставить("Host", Хост);
	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Upgrade-Insecure-Requests", "1");
	Заголовки.Вставить("User-Agent",
					   "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62");
	Заголовки.Вставить("Accept",
					   "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9");
	Заголовки.Вставить("Referer", Реферер);
	//	Заголовки.Вставить("Accept-Encoding", "gzip, deflate");
	Заголовки.Вставить("Accept-Language", "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7");
	Заголовки.Вставить("Cookie",
					   "PHPSESSID=pe8m04cl41iotc59f795itv9hfgfjue8; auth=69dad64f39ab8925696e61891f197f29; _ym_isad=2; company_id=79; notice_seen=1640671260; shop_brand_size=24px");
	Заголовки.Вставить("Accept-Encoding", "identity");

	Возврат Заголовки

КонецФункции

// Устанавливает HTTP-соединение
//
// Параметры:
//  HTTPСоединение	 - 	 - 
//  Заголовки		 - 	 - 
// 
// Возвращаемое значение:
//  Булево - завершено без ошибок
//
Функция УстановитьСоединениеССайтом(HTTPСоединение, Заголовки, Профиль)

	Успешно = Истина;
	Сообщение = Новый СообщениеПользователю;

	Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "Адрес");

	Попытка
		HTTPСоединение = Новый HTTPСоединение(Адрес);
		//		Сообщение.Текст = "Установлено соединение с сервером для профиля " + Профиль.Наименование;		
	Исключение
		Сообщение.Текст = "Не удалось соединиться с сервером: " + Адрес + Символы.ПС + ОписаниеОшибки();
		Успешно = Ложь;
	КонецПопытки;

//	Сообщение.Сообщить();

	Возврат Успешно;

КонецФункции

// Обработать страницу заказов.
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
//  СтраницаВHTML - Строка - Страница ВHTML
//  Счетчик - Число - Счетчик
//  СписокПоставщиков - Массив - Список поставщиков
//  ДанныеПрофиля - Структура - Данные профиля:
// * Логин - Строка - 
// * Пароль - Строка - 
// * Адрес - Строка - 
// * РежимЗаказовБезДетализации - Строка - 
// * РежимЗаказовСДетализацией - Строка - 
// * РесурсЗаказы - Строка - 
// * РесурсЗаказ - Строка - 
// * РесурсКлиент - Строка - 
// * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - 
// * Склад - СправочникСсылка.Склады - 
// * ДнейПросмотра - Число - 
// 
// Возвращаемое значение:
//  Булево - Обработать страницу заказов
Функция ОбработатьСтраницуЗаказов(Профиль, СтраницаВHTML, Счетчик, СписокПоставщиков, ДанныеПрофиля)

	Чтение = Новый ЧтениеHTML;
	Чтение.УстановитьСтроку(СтраницаВHTML);

	ОбъектыDOM = Новый ПостроительDOM;
	Дом = ОбъектыDOM.Прочитать(Чтение);

	СтрокиТаблицы = Дом.ПолучитьЭлементыПоИмени("tr");

	Если СтрокиТаблицы.Количество() > 0 Тогда

		ПродолжатьОбработкуЗаказов = Истина;

		Для Каждого СтрокаТ Из СтрокиТаблицы Цикл

			НаВыгрузку = СодержимоеСтрокиСпискаЗаказов(СтрокаТ, ДанныеПрофиля);

			Если ТипЗнч(НаВыгрузку) = Тип("Структура") Тогда

				Если НаВыгрузку.СтатусЗаказа <> Перечисления.МФ_КАИССтатусыЗаказов.Выполнен
					 И НаВыгрузку.СтатусЗаказа <> Перечисления.МФ_КАИССтатусыЗаказов.Отказ Тогда

					НайденЗаказ = Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента", НаВыгрузку.Номер);

					Если НайденЗаказ.Пустая() Тогда

					//////////////////////////////////////////////////////////////////////////////
						КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("МФ_КодКАИС", НаВыгрузку.КлиентКод);

						Если КонтрагентСсылка.Пустая() Тогда

							УжеВСписке = Ложь;

							ОписаниеКлиента = СтрШаблон("%1 -- %2", НаВыгрузку.КлиентКод, НаВыгрузку.КлиентСайта);

							Для Каждого Элемент Из СписокПоставщиков Цикл

								Если Элемент = ОписаниеКлиента Тогда

									УжеВСписке = Истина;
									Прервать;

								КонецЕсли;

							КонецЦикла;

							Если Не УжеВСписке Тогда
								СписокПоставщиков.Добавить(ОписаниеКлиента);
							КонецЕсли;	
//						СоздатьПартнераИКонтрагента(КонтрагентСсылка, НаВыгрузку);

						Иначе

						//@skip-check query-in-loop
							ДанныеСоглашения = ДанныеСоглашенияКонтрагента(КонтрагентСсылка);

							ТекстСообщения = СтрШаблон("Создание заказа %1", НаВыгрузку.Номер);
							ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);

							ПартнерСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "Партнер");

							ДанныеЗаказа = ДанныеНовогоЗаказа(ДанныеПрофиля);

							ДанныеЗаказа.Вставить("МФ_Идентификатор", НаВыгрузку.Идентификатор);
							ДанныеЗаказа.Вставить("МФ_Номер", НаВыгрузку.Номер);
							ДанныеЗаказа.Вставить("Дата", НаВыгрузку.Дата);
							ДанныеЗаказа.Вставить("НомерПоДаннымКлиента", НаВыгрузку.Номер);
							ДанныеЗаказа.Вставить("ДатаПоДаннымКлиента", НаВыгрузку.Дата);
							ДанныеЗаказа.Вставить("Контрагент", КонтрагентСсылка);
							ДанныеЗаказа.Вставить("Партнер", ПартнерСсылка);
							ДанныеЗаказа.Вставить("Комментарий", СтрШаблон("Клиент: код - %1, наименование - %2",
																		   НаВыгрузку.КлиентКод,
																		   НаВыгрузку.КлиентСайта));

							Счетчик = Счетчик + 1;
							ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
							ЗаказКлиента.Заполнить(ДанныеЗаказа);

							ЗаполнитьЗначенияСвойств(ЗаказКлиента, ДанныеЗаказа,, "Организация");

							Если ДанныеСоглашения <> Неопределено Тогда
								ЗаполнитьЗначенияСвойств(ЗаказКлиента, ДанныеСоглашения);
							КонецЕсли;

							ЗаказКлиента.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПрофиля.Организация);

							СтрокиЗаказовНаСайте(Профиль,
												 НаВыгрузку.Идентификатор,
												 НаВыгрузку.Номер,
												 Неопределено,
												 Неопределено,
												 ЗаказКлиента,
												 ДанныеПрофиля);

							Попытка
								ЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
							КонецПопытки;

						КонецЕсли;
					//////////////////////////////////////////////////////////////////////////////
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		ПродолжатьОбработкуЗаказов = Ложь;

	КонецЕсли;

	Возврат ПродолжатьОбработкуЗаказов;

КонецФункции

Функция ДанныеСоглашенияКонтрагента(Контрагент)

	Результат = Неопределено;

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	СоглашенияСКлиентами.Ссылка КАК Соглашение,
				   |	СоглашенияСКлиентами.Организация КАК Организация,
				   |	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов
				   |ИЗ
				   |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
				   |ГДЕ
				   |	СоглашенияСКлиентами.Контрагент = &Контрагент
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	СоглашенияСКлиентами.ДатаНачалаДействия УБЫВ";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат = Выборка;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура СоздатьПартнераИКонтрагента(КонтрагентСсылка, НаВыгрузку)
	Перем КонтрагентОбъект;
	Перем Партнер;
	Перем Наименование;
	Перем ЮрФизЛицо;
	Перем ИндексКонца;
	ИндексКонца = СтрНайти(НаВыгрузку.КлиентСайта, "  ");
	Наименование = ?(ИндексКонца = 0, НаВыгрузку.КлиентСайта, Лев(НаВыгрузку.КлиентСайта, ИндексКонца));
	Наименование = СокрЛП(Наименование);

	ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;

	Если СтрНачинаетсяС(Наименование, "Индивидуальный предприниматель ") Тогда

		Наименование = СтрЗаменить(Наименование, "Индивидуальный предприниматель ", "");
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;

	ИначеЕсли СтрНачинаетсяС(Наименование, "ИП ") Тогда

		Наименование = СтрЗаменить(Наименование, "ИП ", "");
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;

	КонецЕсли;

	ПартнерСсылка = Справочники.Партнеры.ПустаяСсылка();

	Партнер = Справочники.Партнеры.СоздатьЭлемент();
	Партнер.Заполнить(Неопределено);
	Партнер.Наименование = Наименование;
	Партнер.НаименованиеПолное = Наименование;
	Партнер.Клиент = Истина;

	Попытка

		Партнер.Записать();
		ПартнерСсылка = Партнер.Ссылка;

	Исключение

		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

	КонецПопытки;

	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентОбъект.Заполнить(Неопределено);
	КонтрагентОбъект.МФ_КодКАИС = НаВыгрузку.КлиентКод;
	КонтрагентОбъект.Наименование = Наименование;
	КонтрагентОбъект.ЮрФизЛицо = ЮрФизЛицо;
	КонтрагентОбъект.Партнер = ПартнерСсылка;

	Попытка

		КонтрагентОбъект.Записать();
		КонтрагентСсылка = КонтрагентОбъект.Ссылка;

	Исключение

		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

	КонецПопытки;
КонецПроцедуры

// Возвращает распарсенную строку списка заказов.
// 
// Параметры:
//  СтрокаТ - Строка - Строка списка заказов
//  ДанныеПрофиля - См. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля
// 
// Возвращаемое значение:
//  Неопределено, Дата, Структура:
//	* Дата - Дата  
Функция СодержимоеСтрокиСпискаЗаказов(СтрокаТ, ДанныеПрофиля)

	Дата = Неопределено;

	Если СтрокаТ.ЕстьАтрибут("order_id") Тогда

		КолонкиТаблицы = СтрокаТ.ПолучитьЭлементыПоИмени("td");

		Если КолонкиТаблицы.Количество() > 0 Тогда

			// Колонка 3 - дата заказа
			Дата = XmlЗначение(Тип("Дата"), КолонкиТаблицы[2].ПолучитьАтрибут("data-value"));
			Если Дата >= ДанныеПрофиля.МинимальнаяДата Тогда

				НаВыгрузку = Новый Структура;
				НаВыгрузку.Вставить("Дата", Дата);
				НаВыгрузку.Вставить("Идентификатор", СтрокаТ.ПолучитьАтрибут("order_id"));

				Если СтрокаТ.ЕстьАтрибут("order_number") Тогда
					НаВыгрузку.Вставить("Номер", СтрокаТ.ПолучитьАтрибут("order_number"));
				КонецЕсли;

	
				// Колонка 2 - код клиента
				ЭлементыSpan = КолонкиТаблицы[1].ПолучитьЭлементыПоИмени("span");
				КлиентКод = СтрЗаменить(ЭлементыSpan[1].ТекстовоеСодержимое, "[", "");
				КлиентКод = СтрЗаменить(КлиентКод, "]", "");
				НаВыгрузку.Вставить("КлиентКод", КлиентКод);
	
				// Колонка 2 - наименование клиента
				КлиентСайта = ИзвлечьТекст(КолонкиТаблицы[1].ТекстовоеСодержимое);
				ИндексНачала = СтрНайти(КлиентСайта, "]") + 1;
				КлиентСайта = СокрЛП(Сред(КлиентСайта, ИндексНачала));

				НаВыгрузку.Вставить("КлиентСайта", КлиентСайта);

				// Колонка 4
				НаВыгрузку.Вставить("Количество", КолонкиТаблицы[3].ПолучитьАтрибут("data-value"));
	
				// Колонка 5
				НаВыгрузку.Вставить("Сумма", КолонкиТаблицы[4].ПолучитьАтрибут("data-value"));
	
				// Колонка 6
				НаВыгрузку.Вставить("ЦенаДоставки", КолонкиТаблицы[5].ПолучитьАтрибут("data-value"));
	
				// Колонка 7
				НаВыгрузку.Вставить("Итого", КолонкиТаблицы[6].ПолучитьАтрибут("data-value"));
	
				// Колонка 8
				НаВыгрузку.Вставить("Оплата", ИзвлечьТекст(КолонкиТаблицы[7].ТекстовоеСодержимое));
	
				// Колонка 9
				НаВыгрузку.Вставить("ТорговаяТочкаКод", КолонкиТаблицы[8].ТекстовоеСодержимое);
	
				// Колонка 10
				НаВыгрузку.Вставить("Доставка", КолонкиТаблицы[9].ТекстовоеСодержимое);
	
				// Колонка 12
				ТекстСтатуса = СокрЛП(СтрЗаменить(ИзвлечьТекст(КолонкиТаблицы[11].ТекстовоеСодержимое), " ", ""));
				ЗначениеСтатуса = Перечисления.МФ_КАИССтатусыЗаказов[ТекстСтатуса];
				НаВыгрузку.Вставить("СтатусЗаказа", ЗначениеСтатуса);

			Иначе

				НаВыгрузку = Дата;

			КонецЕсли;

		КонецЕсли;

	Иначе

		НаВыгрузку = Неопределено;

	КонецЕсли;

	Возврат НаВыгрузку;

КонецФункции

// Данные нового заказа.
// 
// Параметры:
//  ДанныеПрофиля - См. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля
// 
// Возвращаемое значение:
//  Структура - Данные нового заказа:
// * Статус - ПеречислениеСсылка.СтатусыЗаказовКлиентов - 
// * Автор - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - 
// * Приоритет - СправочникСсылка.Приоритеты, Неопределено - 
// * Склад - СправочникСсылка.Склады - 
Функция ДанныеНовогоЗаказа(ДанныеПрофиля)

	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Статус", Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ДанныеЗаказа.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ДанныеЗаказа.Вставить("Приоритет", ЗначениеНастроекПовтИсп.ПолучитьПриоритетПоУмолчанию());
	ДанныеЗаказа.Вставить("Склад", ДанныеПрофиля.Склад);
	ДанныеЗаказа.Вставить("ЦенаВключаетНДС", Истина);
	ДанныеЗаказа.Вставить("Организация", ДанныеПрофиля.Организация);

	Возврат ДанныеЗаказа

КонецФункции

Функция ИзвлечьТекст(Текст)

	ЧистыйТекст = СтрЗаменить(Текст, Символы.ПС, "");
	ЧистыйТекст = СокрЛП(ЧистыйТекст);

	Возврат ЧистыйТекст;

КонецФункции

// Строки заказов на сайте.
// 
// Параметры:
//  Профиль Профиль
//  Номер - Неопределено, Строка - Номер
//  Шифр - Неопределено, Строка - Шифр
//  СписокПоставщиков - Неопределено - Список поставщиков
//  ВыборкаПоставщиков - Неопределено - Выборка поставщиков
//  ЗаказКлиента - ДокументОбъект.ЗаказКлиента - Заказ клиента
Процедура СтрокиЗаказовНаСайте(Профиль, Номер, Шифр, СписокПоставщиков, ВыборкаПоставщиков, ЗаказКлиента, ДанныеПрофиля)

	СодержимоеЗаказа = СодержимоеЗаказа(Профиль,
										Номер,
										Шифр,
										СписокПоставщиков,
										ВыборкаПоставщиков,
										ЗаказКлиента,
										ДанныеПрофиля);

	СуммаДокумента = 0;

	Для Каждого Эл Из СодержимоеЗаказа Цикл	// 		Для Каждого Эл Из СтрокиТаблицы Цикл

		СтрокаОтказана = Ложь;

		ТоварСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Эл.Артикул);

		Если ТоварСсылка.Пустая() И Не ПустаяСтрока(Эл.НоменклатураСайта) Тогда

			ТоварОбъект = НоваяНоменклатура(ДанныеПрофиля);

			ТоварОбъект.Наименование = Эл.НаименованиеНоменклатуры;
			ТоварОбъект.Артикул = Эл.Артикул;

			Производитель = НайтиСоздатьПроизводителя(Эл.НаименованиеПроизводителя);

			ТоварОбъект.Производитель = Производитель;

			Попытка

				ТоварОбъект.Записать();
				ТоварСсылка = ТоварОбъект.Ссылка;

			Исключение

				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				ТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();

			КонецПопытки;

		КонецЕсли;

		СтрокаТЧТовары = ЗаказКлиента.Товары.Добавить();

		СтрокаТЧТовары.Номенклатура = ТоварСсылка;
		СтрокаТЧТовары.Количество = Эл.Количество;
		СтрокаТЧТовары.КоличествоУпаковок = Эл.Количество;
		СтрокаТЧТовары.Цена = Эл.Цена;
		СтрокаТЧТовары.Сумма = Эл.Цена * Эл.Количество;
		СтрокаТЧТовары.СуммаСНДС = СтрокаТЧТовары.Сумма;
		СтрокаТЧТовары.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварСсылка, "СтавкаНДС");
		СтрокаТЧТовары.СуммаНДС = СтрокаТЧТовары.Сумма / 120 * 20;
		СтрокаТЧТовары.Обособленно = Истина;
		СтрокаТЧТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;

		СуммаДокумента = СуммаДокумента + СтрокаТЧТовары.Сумма;

	КонецЦикла;

	ЗаказКлиента.СуммаДокумента = СуммаДокумента;

КонецПроцедуры

// Возвращает ссылку найденного по наименованию либо созданного производителя
// 
// Параметры:
//  Наименование - Строка - Наименование
// 
// Возвращаемое значение:
//  СправочникСсылка.Производители - Производитель с наименованием Наименование
Функция НайтиСоздатьПроизводителя(Наименование)

	ПроизводительСсылка = Справочники.Производители.НайтиПоНаименованию(Наименование);

	Если ПроизводительСсылка.Пустая() Тогда

		ПроизводительОбъект = Справочники.Производители.СоздатьЭлемент();
		ПроизводительОбъект.Заполнить(Неопределено);

		ПроизводительОбъект.Наименование = Наименование;

		Попытка
			ПроизводительОбъект.Записать();
			ПроизводительСсылка = ПроизводительОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка создания производителя (каталога) с нименованием:'")
												  + Наименование);
		КонецПопытки;

	КонецЕсли;

	Возврат ПроизводительСсылка

КонецФункции

Функция НоваяНоменклатура(ДанныеПрофиля)

	ТоварОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	ТоварОбъект.Заполнить(Неопределено);

	ТоварОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ТоварОбъект.ВидНоменклатуры = ДанныеПрофиля.ВидНоменклатуры;

	Попытка
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ТоварОбъект);
	Исключение
// TODO:
	КонецПопытки;
	
//	ТоварОбъект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду();
	Возврат ТоварОбъект

КонецФункции

Процедура ВставитьСПроверкой(Источник, Получатель, Ключ, ИмяАттрибута, Число = Ложь)

	Если Источник.ЕстьАтрибут(ИмяАттрибута) Тогда

		Значение = Источник.ПолучитьАтрибут(ИмяАттрибута);

		Если Число Тогда
			Значение = Число(Значение);
		КонецЕсли;

		Получатель[Ключ] = Значение;

	КонецЕсли;

КонецПроцедуры

Функция РазбитьПострочно(Текст)

	Результат = Новый Массив;

	Пока СтрДлина(Текст) > 0 Цикл

		Текст = СокрЛП(Текст);

		Подстрока = СтрПолучитьСтроку(Текст, 1);
		Текст = СокрЛП(Сред(Текст, СтрДлина(Подстрока) + 1));

		Подстрока = СокрЛП(Подстрока);
		Если СтрДлина(Подстрока) > 0 Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ПолучтьКаталогИАртикул(ИсходнаяСтрока, Артикул, Каталог)

	Перем КэшАртикула, Поз;

	КэшАртикула = СокрЛП(ИсходнаяСтрока);
	
	// Поиск последнего пробела     
	Поз = СтрДлина(КэшАртикула);
	Пока Сред(КэшАртикула, Поз, 1) <> " " И Поз > 0 Цикл
		Поз = Поз - 1;
	КонецЦикла;

	Артикул = Сред(КэшАртикула, Поз + 1);
	Каталог = Лев(КэшАртикула, Поз - 1);

	Артикул = СтрЗаменить(Артикул, "_", "");
	Артикул = СтрЗаменить(Артикул, ".", "");
	Артикул = СтрЗаменить(Артикул, "-", "");
	Артикул = ВРег(Артикул);

КонецПроцедуры

// Содержимое заказа.
// 
// Параметры:
//  Профиль - СправочникСсылка.МФ_ПрофилиKAIS - Профиль
//  Номер - Неопределено, Строка - Номер
//  Шифр - Неопределено, Строка - Шифр
//  СписокПоставщиков - Неопределено - Список поставщиков
//  ВыборкаПоставщиков - Неопределено - Выборка поставщиков
//  ЗаказКлиента - ДокументОбъект.ЗаказКлиента - Заказ клиента
//  ДанныеПрофиля - см. ДанныеПрофиля 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. СодержимоеЗаказа 
Функция СодержимоеЗаказа(Профиль, Номер, Шифр, СписокПоставщиков, ВыборкаПоставщиков, ЗаказКлиента, ДанныеПрофиля)

	Содержимое = ТаблицаСтрокЗаказов();

	ИмяМетода = "GET";
	HTTPСоединение = Неопределено;
	Продолжать = Истина;

	Сигнатура = "вход RUR:</td><td>";
	ДлинаСигнатуры = СтрДлина(Сигнатура);

	// Установка соединения с сайтом
	Заголовки = Заголовки(Профиль);
	Продолжать = УстановитьСоединениеССайтом(HTTPСоединение, Заголовки, Профиль);

	Если Продолжать Тогда

		АдресРесурсаШаблон = ДанныеПрофиля.РесурсЗаказ;

		АдресРесурса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресРесурсаШаблон, Номер);
		
		// Создать HTTP-запроса.
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		// Получить ответ сервера в виде объекта HTTPОтвет.
		Результат = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);

		Если Результат.КодСостояния = 200 Тогда

			Ответ = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);

			Чтение = Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(Ответ);

			ОбъектыDOM = Новый ПостроительDOM;
			Дом = ОбъектыDOM.Прочитать(Чтение);

			СтрокиТаблицы = Дом.ПолучитьЭлементыПоИмени("tr");
// 			Нечто = Дом.ПолучитьЭлементыПоИмени("supplier_id");	//TODO: решить судьбу строки

			Для Каждого Эл Из СтрокиТаблицы Цикл

				Если СокрЛП(Эл.ИмяКласса) = "detail_tr" И Эл.ЕстьАтрибут("order_id") И Эл.ЕстьАтрибут("cart_id") Тогда

					СтрокаТЗ = Содержимое.Добавить();
					СтрокаТЗ.Идентификатор = Эл.ПолучитьАтрибут("order_id");

					// Заполнение данными из атрибутов
					ВставитьСПроверкой(Эл, СтрокаТЗ, "ПоставщикКод", "supplier_id");
					ВставитьСПроверкой(Эл, СтрокаТЗ, "ПоставщикКод", "supplier_id");

					ВставитьСПроверкой(Эл, СтрокаТЗ, "Количество", "cnt", Истина);
					ВставитьСПроверкой(Эл, СтрокаТЗ, "Цена", "price", Истина);
								
					// Заполнение данными из таблицы
					КолонкиТаблицы = Эл.ПолучитьЭлементыПоИмени("td"); 
				
					// Колонка 2 - код строки в заказе на сайте
					СтрокаТЗ.НомерПозиции = СокрЛП(КолонкиТаблицы[1].ТекстовоеСодержимое);
				
					// Колонка 3 - артикул и наименование товара
					Строки = РазбитьПострочно(КолонкиТаблицы[2].ТекстовоеСодержимое);

					Артикул = "";
					Каталог = "";
					НоменклатураСайта = ?(Строки.Количество() = 1, Строки[0], Строки[1]);
					ПолучтьКаталогИАртикул(Строки[0], Артикул, Каталог);

					СтрокаТЗ.Артикул = Артикул;
					СтрокаТЗ.НаименованиеПроизводителя = Каталог;
					СтрокаТЗ.НаименованиеНоменклатуры = СтрШаблон("%1 [%2/%3]", НоменклатураСайта, Каталог, Артикул);
					СтрокаТЗ.НоменклатураСайта = НоменклатураСайта;
				
					// Колонка 5 - входящая цена
					СтрокаТЗ.ЦенаВходящая = ВходнаяЦена(КолонкиТаблицы, ДлинаСигнатуры, Сигнатура);
				
					// Колонка 6 - расшифровка поставщика
					Текст = КолонкиТаблицы[6].ДочерниеУзлы[1].Заголовок;
					НачальныйСимвол = СтрНайти(Текст, "]") + 2;

					СтрокаТЗ.НаименованиеПоставщика = Сред(Текст, НачальныйСимвол);
				
					// Колонка 12 - отказ
					Текст = СокрЛП(КолонкиТаблицы[11].ТекстовоеСодержимое);
					Если СтрНайти(Текст, "Отказ") > 0 Тогда
						СтрокаТЗ.Отказ = Истина;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		Иначе

			ОбщегоНазначения.СообщитьПользователю(Строка(Результат.КодСостояния) + " - ЗаполнитьПоставщиковСайта");
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецЕсли;

	КонецЕсли;

	Возврат Содержимое;

КонецФункции

// Создает таблицу для хранения строк заказов 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица строк заказов:
// * Идентификатор - Строка
// * ПоставщикКод - Строка
// * ПоставщикСайта - Строка
// * Количество - Число
// * Цена - Число
// * ЦенаВходящая - Число 
// * НаименованиеНоменклатуры - Строка 
// * Артикул - Строка
// * НаименованиеПроизводителя - Строка 
// * НомерПозиции - Строка
// * НоменклатураСайта - Строка
// * НаименованиеПоставщика - Строка
// * Отказ - Булево - 
Функция ТаблицаСтрокЗаказов()

	Содержимое = Новый ТаблицаЗначений;

	Содержимое.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	Содержимое.Колонки.Добавить("ПоставщикКод", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("ПоставщикСайта", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Содержимое.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Содержимое.Колонки.Добавить("ЦенаВходящая", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Содержимое.Колонки.Добавить("НаименованиеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Содержимое.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("НаименованиеПроизводителя", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("НомерПозиции", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Содержимое.Колонки.Добавить("НоменклатураСайта", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("НаименованиеПоставщика", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("Отказ", Новый ОписаниеТипов("Булево"));

	Возврат Содержимое

КонецФункции

Функция ВходнаяЦена(Колонки, ДлинаСигнатуры, Сигнатура)

	НомерКолонкиЦен = 4;

	СодержимоеКолонки = Колонки[НомерКолонкиЦен].ПолучитьАтрибут("data-content");

	Индекс = СтрНайти(СодержимоеКолонки, Сигнатура);
	Подстрока = Сред(СодержимоеКолонки, Индекс + ДлинаСигнатуры);
	ДлинаЧисла = СтрНайти(Подстрока, "<");
	ВходнаяЦенаСтрокой = Лев(Подстрока, ДлинаЧисла - 1);

	Попытка
		ВходнаяЦена = Число(ВходнаяЦенаСтрокой);
	Исключение

		СодержимоеКолонки = Колонки[4].ПолучитьАтрибут("data-value");
		ВходнаяЦена = Число(СодержимоеКолонки);

	КонецПопытки;

	Возврат ВходнаяЦена

КонецФункции

#КонецОбласти