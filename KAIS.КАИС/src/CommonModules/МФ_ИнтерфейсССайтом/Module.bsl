//
//	Филимонов И.В.
//		+7 913 240 81 77
//		+7 905 084 20 06 (Telegram)
//		https://github.com/Shu-ler
//		
#Область ПрограммныйИнтерфейс

#Область Конструкторы

// Таблица заказов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица заказов:
// * Дата - Дата
// * Идентификатор - Строка 
// * Номер - Строка
// * КлиентКод - Строка
// * КлиентСайта - Строка
// * СтатусЗаказа - ПеречислениеСсылка.МФ_КАИССтатусыЗаказов - 
// * Контрагент - СправочникСсылка.Контрагенты
Функция ТаблицаЗаказов() Экспорт

	ТаблицаЗаказов = Новый ТаблицаЗначений;

	ТаблицаЗаказов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗаказов.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ТаблицаЗаказов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТаблицаЗаказов.Колонки.Добавить("КлиентКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаЗаказов.Колонки.Добавить("КлиентСайта", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаЗаказов.Колонки.Добавить("СтатусЗаказа", Новый ОписаниеТипов("ПеречислениеСсылка.МФ_КАИССтатусыЗаказов"));
	ТаблицаЗаказов.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	Возврат ТаблицаЗаказов;

КонецФункции

// Создает таблицу для хранения строк заказов (конструктор таблицы значений) 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица строк заказов:
// * Идентификатор - Строка
// * ПоставщикКод - Строка
// * ПоставщикСайта - Строка
// * Количество - Число
// * Цена - Число
// * ЦенаВходящая - Число 
// * НаименованиеНоменклатуры - Строка 
// * Артикул - Строка
// * НаименованиеПроизводителя - Строка 
// * НомерПозиции - Строка
// * НоменклатураСайта - Строка
// * НаименованиеПоставщика - Строка
// * Отказ - Булево - 
Функция ТаблицаСтрокЗаказов() Экспорт

	Содержимое = Новый ТаблицаЗначений;

	Содержимое.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	Содержимое.Колонки.Добавить("ПоставщикКод", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("ПоставщикСайта", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Содержимое.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Содержимое.Колонки.Добавить("ЦенаВходящая", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Содержимое.Колонки.Добавить("НаименованиеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Содержимое.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Содержимое.Колонки.Добавить("НаименованиеПроизводителя", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("НомерПозиции", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Содержимое.Колонки.Добавить("НоменклатураСайта", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("НаименованиеПоставщика", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Содержимое.Колонки.Добавить("Отказ", Новый ОписаниеТипов("Булево"));

	Возврат Содержимое

КонецФункции

#КонецОбласти

#Область ЧтениеСтраницСайта

// Возвращает HTML - страницу заказа по его номеру-ссылке.
// 
// Параметры:
//  НомерСсылка - Строка - Номер для ссылки страницы заказа
//  ДанныеПрофиля - см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
// 
// Возвращаемое значение:
//  Неопределено, Строка - Страница HTMLЗаказа
Функция СтраницаHTMLЗаказа(НомерСсылка, ДанныеПрофиля) Экспорт

	АдресРесурса = СтрШаблон(ДанныеПрофиля.РесурсЗаказ, НомерСсылка);

	Результат = СтраницаHTML(АдресРесурса, ДанныеПрофиля);

	Возврат Результат

КонецФункции

// Возвращает HTML - страницу заказа по его номеру-ссылке.
// 
// Параметры:
//  НомерСтраницы - Число - Номер страницы
//  ДанныеПрофиля - см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
// 
// Возвращаемое значение:
//  Неопределено, Строка - Страница HTMLЗаказа
Функция СтраницаHTMLСписокЗаказов(НомерСтраницы, ДанныеПрофиля) Экспорт

	ФорматДаты = "ДФ=dd.MM.yyyy;";
	ДатаОкончания = ТекущаяДатаСеанса();
	ДатаНачала = ОбщегоНазначенияУТКлиентСервер.ДобавитьКДатеВремя(ДатаОкончания,
																   -ДанныеПрофиля.ДнейПросмотра,
																   Перечисления.ЕдиницыИзмеренияВремени.День);
	АдресРесурса = СтрШаблон(ДанныеПрофиля.РесурсЗаказы,
							 Формат(НомерСтраницы, "ЧН=0; ЧГ=0;"),
							 ДанныеПрофиля.РежимЗаказовБезДетализации);
//	АдресРесурса = АдресРесурса + "&filters=%7B%22date_period%22%3A%22INTERVAL+1+MONTH%22%7D";
	АдресРесурса = СтрШаблон("%1?filters=%%7B""date_created""%%3A""%2-%3""%%7D&""",
							 АдресРесурса,
							 Формат(ДатаНачала, ФорматДаты),
							 Формат(ДатаОкончания, ФорматДаты));
	Результат = СтраницаHTML(АдресРесурса, ДанныеПрофиля);

	Возврат Результат

КонецФункции

#КонецОбласти

#Область Парсинг

// Список заказов.
// 
// Параметры:
//  ДанныеПрофиля - см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список заказов
Функция СписокЗаказов(ДанныеПрофиля) Экспорт

	ТаблицаЗаказов = ТаблицаЗаказов();
	КоличествоЗаказов = ТаблицаЗаказов.Количество();

	ПродолжатьОбработку = Истина;
	Страница = 0;

	Пока ПродолжатьОбработку Цикл

		СтраницаСписка = СтраницаHTMLСписокЗаказов(Страница, ДанныеПрофиля);

		Если СтраницаСписка = Неопределено Тогда

			ПродолжатьОбработку = Ложь;

		Иначе

			Чтение = Новый ЧтениеHTML;
			Чтение.УстановитьСтроку(СтраницаСписка);

			ОбъектыDOM = Новый ПостроительDOM;
			Дом = ОбъектыDOM.Прочитать(Чтение);

			СтрокиТаблицыHTML = Дом.ПолучитьЭлементыПоИмени("tr");

			КоличествоЗаказовДоОбработкиСтраницы = КоличествоЗаказов;

			Для Каждого СтрокаТаблицыHTML Из СтрокиТаблицыHTML Цикл

				Если СтрокаТаблицыHTML.ЕстьАтрибут("order_id") Тогда
					ДобавитьЗаказВТаблицу(СтрокаТаблицыHTML, ДанныеПрофиля, ТаблицаЗаказов);
				КонецЕсли;

			КонецЦикла;

			КоличествоЗаказов = ТаблицаЗаказов.Количество();

			ПродолжатьОбработку = КоличествоЗаказов > КоличествоЗаказовДоОбработкиСтраницы;

			Страница = Страница + 1;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаЗаказов;

КонецФункции

// Содержимое заказа.
// 
// Параметры:
//  НомерВСсылкуНаСайте - Неопределено, Строка - НомерВСсылкуНаСайте
//  ДанныеПрофиля - см. ДанныеПрофиля 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. СодержимоеЗаказа 
Функция СодержимоеЗаказа(НомерВСсылкуНаСайте, ДанныеПрофиля) Экспорт

	// Константы
	Сигнатура = "вход RUR:</td><td>";
	ДлинаСигнатуры = СтрДлина(Сигнатура);
	
	// Таблица содержимого заказа
	Содержимое = ТаблицаСтрокЗаказов();

	СтраницаHTMLЗаказа = СтраницаHTMLЗаказа(НомерВСсылкуНаСайте, ДанныеПрофиля);

	Если СтраницаHTMLЗаказа <> Неопределено Тогда

		Чтение = Новый ЧтениеHTML;
		Чтение.УстановитьСтроку(СтраницаHTMLЗаказа);

		ОбъектыDOM = Новый ПостроительDOM;
		Дом = ОбъектыDOM.Прочитать(Чтение);

		СтрокиТаблицыНаСайте = Дом.ПолучитьЭлементыПоИмени("tr");
// 			Нечто = Дом.ПолучитьЭлементыПоИмени("supplier_id");	//TODO: решить судьбу строки

		Для Каждого СтрокаНаСайте Из СтрокиТаблицыНаСайте Цикл

			Если НеобходимРазборСтрокиСайта(СтрокаНаСайте) Тогда

				СтрокаТЗ = Содержимое.Добавить();
				СтрокаТЗ.Идентификатор = СтрокаНаСайте.ПолучитьАтрибут("order_id");

				// Заполнение данными из атрибутов
				ВставитьСПроверкой(СтрокаНаСайте, СтрокаТЗ, "ПоставщикКод", "supplier_id");
				ВставитьСПроверкой(СтрокаНаСайте, СтрокаТЗ, "ПоставщикКод", "supplier_id");

				ВставитьСПроверкой(СтрокаНаСайте, СтрокаТЗ, "Количество", "cnt", Истина);
				ВставитьСПроверкой(СтрокаНаСайте, СтрокаТЗ, "Цена", "price", Истина);
								
				// Заполнение данными из таблицы
				КолонкиТаблицы = СтрокаНаСайте.ПолучитьЭлементыПоИмени("td"); 
				
				// Колонка 2 - код строки в заказе на сайте
				СтрокаТЗ.НомерПозиции = СокрЛП(КолонкиТаблицы[1].ТекстовоеСодержимое);
				
				// Колонка 3 - артикул и наименование товара
				Строки = РазбитьПострочно(КолонкиТаблицы[2].ТекстовоеСодержимое);

				Артикул = "";
				Каталог = "";
				НоменклатураСайта = ?(Строки.Количество() = 1, Строки[0], Строки[1]);
				ПолучитьКаталогИАртикул(Строки[0], Артикул, Каталог);

				СтрокаТЗ.Артикул = Артикул;
				СтрокаТЗ.НаименованиеПроизводителя = Каталог;
				СтрокаТЗ.НаименованиеНоменклатуры = СтрШаблон("%1 [%2/%3]", НоменклатураСайта, Каталог, Артикул);
				СтрокаТЗ.НоменклатураСайта = НоменклатураСайта;
				
				// Колонка 5 - входящая цена
				СтрокаТЗ.ЦенаВходящая = ВходнаяЦена(КолонкиТаблицы, ДлинаСигнатуры, Сигнатура);
				
				// Колонка 6 - расшифровка поставщика
				Текст = КолонкиТаблицы[6].ДочерниеУзлы[1].Заголовок;
				НачальныйСимвол = СтрНайти(Текст, "]") + 2;

				СтрокаТЗ.НаименованиеПоставщика = Сред(Текст, НачальныйСимвол);
				
				// Колонка 12 - отказ
				Текст = СокрЛП(КолонкиТаблицы[11].ТекстовоеСодержимое);
				Если СтрНайти(Текст, "Отказ") > 0 Тогда
					СтрокаТЗ.Отказ = Истина;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Содержимое;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает соединение с сайтом
// 
// Параметры:
//  ДанныеПрофиля - см. ДанныеПрофиля 
// 
// Возвращаемое значение:
//  Неопределено, HTTPСоединение - Соединение с сайтом
Функция СоединениеССайтом(ДанныеПрофиля)

	Попытка
		HTTPСоединение = Новый HTTPСоединение(ДанныеПрофиля.Адрес);
	Исключение
		HTTPСоединение = Неопределено;
	КонецПопытки;

	Возврат HTTPСоединение;

КонецФункции

// Возвращает HTML - страницу по адресу.
// 
// Параметры:
//  АдресРесурса - Строка - Адрес ресурса
//  ДанныеПрофиля - см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
// 
// Возвращаемое значение:
//  Неопределено, Строка - Страница HTMLЗаказа
Функция СтраницаHTML(АдресРесурса, ДанныеПрофиля)

	// Инициализация результата функции
	Результат = Неопределено;
	
	// Константы
	ИмяМетода = "GET";
	
	// Установка соединения с сайтом
	HTTPСоединение = СоединениеССайтом(ДанныеПрофиля);

	Если HTTPСоединение = Неопределено Тогда

		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка соединения с сайтом. Подробности см. Журнал регистрации'"));

	Иначе
		
		// Создание запроса
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ДанныеПрофиля.Заголовки);
	
		// Получение ответа сайта в виде объекта HTTPОтвет.
		ОтветСайта = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);

		Если ОтветСайта.КодСостояния = 200 Тогда

			Результат = ОтветСайта.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);

		Иначе

			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка чтения с сайта. Подробности см. Журнал регистрации'"));
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Код ошибки %1", ОтветСайта.КодСостояния));

		КонецЕсли;

	КонецЕсли;

	Возврат Результат

КонецФункции

// Возвращает распарсенную строку списка заказов.
// 
// Параметры:
//  СтрокаТаблицыHTML - Строка - Строка списка заказов
//  ДанныеПрофиля - см. СправочникМенеджер.МФ_ПрофилиKAIS.ДанныеПрофиля 
//  Таблица - см. ТаблицаЗаказов 
// 
Процедура ДобавитьЗаказВТаблицу(СтрокаТаблицыHTML, ДанныеПрофиля, Таблица)

	КолонкиТаблицы = СтрокаТаблицыHTML.ПолучитьЭлементыПоИмени("td");

	Если КолонкиТаблицы.Количество() > 0 Тогда
		
		// Колонка 3 - дата заказа
		Дата = XmlЗначение(Тип("Дата"), КолонкиТаблицы[2].ПолучитьАтрибут("data-value"));

		Если Дата >= ДанныеПрофиля.МинимальнаяДата Тогда

			СтрокаТЗ = Таблица.Добавить();
			СтрокаТЗ.Дата = Дата;

			СтрокаТЗ.Идентификатор = СтрокаТаблицыHTML.ПолучитьАтрибут("order_id");

			Если СтрокаТаблицыHTML.ЕстьАтрибут("order_number") Тогда
				СтрокаТЗ.Номер = СтрокаТаблицыHTML.ПолучитьАтрибут("order_number");
			КонецЕсли;

			// Колонка 2 - код клиента
			ЭлементыSpan = КолонкиТаблицы[1].ПолучитьЭлементыПоИмени("span");
			КлиентКод = СтрЗаменить(ЭлементыSpan[1].ТекстовоеСодержимое, "[", "");
			КлиентКод = СтрЗаменить(КлиентКод, "]", "");
			СтрокаТЗ.КлиентКод = КлиентКод;
	
			// Колонка 2 - наименование клиента
			КлиентСайта = ИзвлечьТекст(КолонкиТаблицы[1].ТекстовоеСодержимое);
			ИндексНачала = СтрНайти(КлиентСайта, "]") + 1;
			КлиентСайта = СокрЛП(Сред(КлиентСайта, ИндексНачала));
			СтрокаТЗ.КлиентСайта = КлиентСайта;

			// Колонка 12
			ТекстСтатуса = СокрЛП(СтрЗаменить(ИзвлечьТекст(КолонкиТаблицы[11].ТекстовоеСодержимое), " ", ""));
//		ЗначениеСтатуса = Перечисления.МФ_КАИССтатусыЗаказов[ТекстСтатуса];
			СтрокаТЗ.СтатусЗаказа = Перечисления.МФ_КАИССтатусыЗаказов[ТекстСтатуса];

			// Сохранение ранее наработанного опыта			
			НаВыгрузку = Новый Структура;
	
			// Колонка 4
			НаВыгрузку.Вставить("Количество", КолонкиТаблицы[3].ПолучитьАтрибут("data-value"));
	
			// Колонка 5
			НаВыгрузку.Вставить("Сумма", КолонкиТаблицы[4].ПолучитьАтрибут("data-value"));
	
			// Колонка 6
			НаВыгрузку.Вставить("ЦенаДоставки", КолонкиТаблицы[5].ПолучитьАтрибут("data-value"));
	
			// Колонка 7
			НаВыгрузку.Вставить("Итого", КолонкиТаблицы[6].ПолучитьАтрибут("data-value"));
	
			// Колонка 8
			НаВыгрузку.Вставить("Оплата", ИзвлечьТекст(КолонкиТаблицы[7].ТекстовоеСодержимое));
	
			// Колонка 9
			НаВыгрузку.Вставить("ТорговаяТочкаКод", КолонкиТаблицы[8].ТекстовоеСодержимое);
	
			// Колонка 10
			НаВыгрузку.Вставить("Доставка", КолонкиТаблицы[9].ТекстовоеСодержимое);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ВставитьСПроверкой(Источник, Получатель, Ключ, ИмяАттрибута, Число = Ложь)

	Если Источник.ЕстьАтрибут(ИмяАттрибута) Тогда

		Значение = Источник.ПолучитьАтрибут(ИмяАттрибута);

		Если Число Тогда
			Значение = Число(Значение);
		КонецЕсли;

		Получатель[Ключ] = Значение;

	КонецЕсли;

КонецПроцедуры

Функция РазбитьПострочно(Текст)

	Результат = Новый Массив;

	Пока СтрДлина(Текст) > 0 Цикл

		Текст = СокрЛП(Текст);

		Подстрока = СтрПолучитьСтроку(Текст, 1);
		Текст = СокрЛП(Сред(Текст, СтрДлина(Подстрока) + 1));

		Подстрока = СокрЛП(Подстрока);
		Если СтрДлина(Подстрока) > 0 Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ПолучитьКаталогИАртикул(ИсходнаяСтрока, Артикул, Каталог)

	Перем КэшАртикула, Поз;

	КэшАртикула = СокрЛП(ИсходнаяСтрока);
	
	// Поиск последнего пробела     
	Поз = СтрДлина(КэшАртикула);
	Пока Сред(КэшАртикула, Поз, 1) <> " " И Поз > 0 Цикл
		Поз = Поз - 1;
	КонецЦикла;

	Артикул = Сред(КэшАртикула, Поз + 1);
	Каталог = Лев(КэшАртикула, Поз - 1);

	Артикул = СтрЗаменить(Артикул, "_", "");
	Артикул = СтрЗаменить(Артикул, ".", "");
	Артикул = СтрЗаменить(Артикул, "-", "");
	Артикул = ВРег(Артикул);

КонецПроцедуры

// Возвращает ИСТИНА, если необходим разбор строки сайта
// 
// Параметры:
//  СтрокаНаСайте - ЭлементHTML - Строка на сайте
// 
// Возвращаемое значение:
//  Булево - Необходим разбор строки сайта
Функция НеобходимРазборСтрокиСайта(СтрокаНаСайте)

	Возврат СокрЛП(СтрокаНаСайте.ИмяКласса) = "detail_tr"
			И СтрокаНаСайте.ЕстьАтрибут("order_id")
			И СтрокаНаСайте.ЕстьАтрибут("cart_id");
КонецФункции

Функция ВходнаяЦена(Колонки, ДлинаСигнатуры, Сигнатура)

	НомерКолонкиЦен = 4;

	СодержимоеКолонки = Колонки[НомерКолонкиЦен].ПолучитьАтрибут("data-content");

	Индекс = СтрНайти(СодержимоеКолонки, Сигнатура);
	Подстрока = Сред(СодержимоеКолонки, Индекс + ДлинаСигнатуры);
	ДлинаЧисла = СтрНайти(Подстрока, "<");
	ВходнаяЦенаСтрокой = Лев(Подстрока, ДлинаЧисла - 1);

	Попытка
		ВходнаяЦена = Число(ВходнаяЦенаСтрокой);
	Исключение

		СодержимоеКолонки = Колонки[4].ПолучитьАтрибут("data-value");
		ВходнаяЦена = Число(СодержимоеКолонки);

	КонецПопытки;

	Возврат ВходнаяЦена

КонецФункции

Функция ИзвлечьТекст(Текст)

	ЧистыйТекст = СтрЗаменить(Текст, Символы.ПС, "");
	ЧистыйТекст = СокрЛП(ЧистыйТекст);

	Возврат ЧистыйТекст;

КонецФункции

#КонецОбласти